{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DLottery__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLottery__WinnerTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestLotterWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recentWinner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterInLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc516e806f50a132859e2816afdb89f6ef37c60ff412f1c4d3fa2b088c3c2ca56",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1032080",
    "logsBloom": "0x
    "blockHash": "0xd4f30e411c0bebad4d2cf8926e6b6882260eaffa198c02ebb34bc64b79f124bf",
    "transactionHash": "0xc516e806f50a132859e2816afdb89f6ef37c60ff412f1c4d3fa2b088c3c2ca56",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1032080",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "5efc1b40cf9ef62e43dcf789fb177bb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DLottery__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLottery__WinnerTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestLotterWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterInLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dLottery.sol\":\"DLottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/dLottery.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\nerror DLottery__NotEnoughEth();\\nerror DLottery__WinnerTransferFailed();\\nerror DLottery__UpkeepNotNeeded();\\n\\ncontract DLottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Type declerations\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    //State Variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint32 private constant NUM_WORDS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    address payable s_recentWinner;\\n    uint256 private s_lastTimestamp;\\n    uint256 private immutable i_interval;\\n    LotteryState private s_lotteryState = LotteryState.OPEN;\\n\\n    // Events\\n    event LotteryEntered(address indexed player);\\n    event RequestLotterWinner(uint256 indexed requestId);\\n    event WinnerPicked(address recentWinner);\\n\\n    // Functions\\n    constructor(\\n        address vrfCoordinator,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_interval = interval;\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert DLottery__UpkeepNotNeeded();\\n        }\\n        pickRandomWinner();\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public override returns (bool upkeepNeeded, bytes memory) {\\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\\n        bool hasPlayer = s_players.length > 0;\\n        bool hasAmount = address(this).balance > 0;\\n        bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\n        upkeepNeeded = (isOpen && hasPlayer && hasAmount && timePassed);\\n    }\\n\\n    function enterInLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert DLottery__NotEnoughEth();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEntered(msg.sender);\\n    }\\n\\n    function pickRandomWinner() internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestLotterWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\\n        internal\\n        virtual\\n        override\\n    {\\n        selectWinner(randomWords[0]);\\n    }\\n\\n    function selectWinner(uint256 randomWord) private {\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 winnerIndex = randomWord % s_players.length;\\n        s_recentWinner = s_players[winnerIndex];\\n        (bool isSuccess, ) = s_recentWinner.call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        resetLottery();\\n        if (!isSuccess) {\\n            revert DLottery__WinnerTransferFailed();\\n        }\\n\\n        emit WinnerPicked(s_recentWinner);\\n    }\\n\\n    // View and Pure\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function resetLottery() private {\\n        s_lotteryState = LotteryState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x15f55dcee8cad1c9d4be97a20be22ac8d3bd1543ac5b05f04c23f7f5e6fc56fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526000600360006101000a81548160ff021916908360018111156200002e576200002d620002ae565b5b02179055503480156200004057600080fd5b506040516200154d3803806200154d8339818101604052810190620000669190620001a6565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b8152505080610140818152505050505050505062000364565b6000815190506200014481620002e2565b92915050565b6000815190506200015b81620002fc565b92915050565b600081519050620001728162000316565b92915050565b600081519050620001898162000330565b92915050565b600081519050620001a0816200034a565b92915050565b60008060008060008060c08789031215620001c657620001c5620002dd565b5b6000620001d689828a0162000133565b9650506020620001e989828a0162000161565b9550506040620001fc89828a016200014a565b94505060606200020f89828a016200018f565b93505060806200022289828a0162000178565b92505060a06200023589828a0162000161565b9150509295509295509295565b60006200024f8262000260565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002ed8162000242565b8114620002f957600080fd5b50565b620003078162000256565b81146200031357600080fd5b50565b620003218162000280565b81146200032d57600080fd5b50565b6200033b816200028a565b81146200034757600080fd5b50565b62000355816200029a565b81146200036157600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6101405161117b620003d260003960006103e30152600061052d0152600061050a015260006104e9015260006104ad0152600061021e01526000818161015e01526101b2015261117b6000f3fe6080604052600436106100555760003560e01c80631fe543e31461005a57806333592fef146100835780634585e33b1461008d57806353a2c19a146100b65780636e04ff0d146100e1578063e55ae4e81461011f575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610b94565b61015c565b005b61008b61021c565b005b34801561009957600080fd5b506100b460048036038101906100af9190610aa4565b61031e565b005b3480156100c257600080fd5b506100cb61037f565b6040516100d89190610dbb565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610af1565b61038e565b604051610116929190610d38565b60405180910390f35b34801561012b57600080fd5b5061014660048036038101906101419190610b3a565b61043a565b6040516101539190610cd9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610205929190610d0f565b60405180910390fd5b6102188282610481565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610276576040517f428067d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60006103386040518060200160405280600081525061038e565b50905080610372576040517f5e674dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61037a6104a9565b505050565b6000600363ffffffff16905090565b6000606060008060018111156103a7576103a661106f565b5b600360009054906101000a900460ff1660018111156103c9576103c861106f565b5b1490506000806000805490501190506000804711905060007f0000000000000000000000000000000000000000000000000000000000000000600254426104109190610e7f565b11905083801561041d5750825b80156104265750815b801561042f5750805b955050505050915091565b600080828154811061044f5761044e61109e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6104a5816000815181106104985761049761109e565b5b60200260200101516105f2565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b815260040161056e959493929190610d68565b602060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610b67565b9050807f5d09b6924be1682a9a4c201bc3dfb755cd08ec2ec368a81877382246f4a1eb9160405160405180910390a250565b6001600360006101000a81548160ff021916908360018111156106185761061761106f565b5b0217905550600080805490508261062f9190610fe0565b9050600081815481106106455761064461109e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516106f890610cc4565b60006040518083038185875af1925050503d8060008114610735576040519150601f19603f3d011682016040523d82523d6000602084013e61073a565b606091505b505090506107466107db565b8061077d576040517fdb673f4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516107ce9190610cf4565b60405180910390a1505050565b6000600360006101000a81548160ff021916908360018111156108015761080061106f565b5b0217905550600067ffffffffffffffff811115610821576108206110cd565b5b60405190808252806020026020018201604052801561084f5781602001602082028036833780820191505090505b506000908051906020019061086592919061086f565b5042600281905550565b8280548282559060005260206000209081019282156108e8579160200282015b828111156108e75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088f565b5b5090506108f591906108f9565b5090565b5b808211156109125760008160009055506001016108fa565b5090565b600061092961092484610dfb565b610dd6565b9050808382526020820190508285602086028201111561094c5761094b611106565b5b60005b8581101561097c57816109628882610a7a565b84526020840193506020830192505060018101905061094f565b5050509392505050565b600061099961099484610e27565b610dd6565b9050828152602081018484840111156109b5576109b461110b565b5b6109c0848285610f6d565b509392505050565b600082601f8301126109dd576109dc611101565b5b81356109ed848260208601610916565b91505092915050565b60008083601f840112610a0c57610a0b611101565b5b8235905067ffffffffffffffff811115610a2957610a286110fc565b5b602083019150836001820283011115610a4557610a44611106565b5b9250929050565b600082601f830112610a6157610a60611101565b5b8135610a71848260208601610986565b91505092915050565b600081359050610a898161112e565b92915050565b600081519050610a9e8161112e565b92915050565b60008060208385031215610abb57610aba611115565b5b600083013567ffffffffffffffff811115610ad957610ad8611110565b5b610ae5858286016109f6565b92509250509250929050565b600060208284031215610b0757610b06611115565b5b600082013567ffffffffffffffff811115610b2557610b24611110565b5b610b3184828501610a4c565b91505092915050565b600060208284031215610b5057610b4f611115565b5b6000610b5e84828501610a7a565b91505092915050565b600060208284031215610b7d57610b7c611115565b5b6000610b8b84828501610a8f565b91505092915050565b60008060408385031215610bab57610baa611115565b5b6000610bb985828601610a7a565b925050602083013567ffffffffffffffff811115610bda57610bd9611110565b5b610be6858286016109c8565b9150509250929050565b610bf981610f37565b82525050565b610c0881610eb3565b82525050565b610c1781610ec5565b82525050565b610c2681610ed1565b82525050565b6000610c3782610e58565b610c418185610e63565b9350610c51818560208601610f7c565b610c5a8161111a565b840191505092915050565b6000610c72600083610e74565b9150610c7d8261112b565b600082019050919050565b610c9181610edb565b82525050565b610ca081610f09565b82525050565b610caf81610f13565b82525050565b610cbe81610f23565b82525050565b6000610ccf82610c65565b9150819050919050565b6000602082019050610cee6000830184610bff565b92915050565b6000602082019050610d096000830184610bf0565b92915050565b6000604082019050610d246000830185610bff565b610d316020830184610bff565b9392505050565b6000604082019050610d4d6000830185610c0e565b8181036020830152610d5f8184610c2c565b90509392505050565b600060a082019050610d7d6000830188610c1d565b610d8a6020830187610cb5565b610d976040830186610c88565b610da46060830185610ca6565b610db16080830184610ca6565b9695505050505050565b6000602082019050610dd06000830184610c97565b92915050565b6000610de0610df1565b9050610dec8282610faf565b919050565b6000604051905090565b600067ffffffffffffffff821115610e1657610e156110cd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610e4257610e416110cd565b5b610e4b8261111a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e8a82610f09565b9150610e9583610f09565b925082821015610ea857610ea7611011565b5b828203905092915050565b6000610ebe82610ee9565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610f4282610f49565b9050919050565b6000610f5482610f5b565b9050919050565b6000610f6682610ee9565b9050919050565b82818337600083830152505050565b60005b83811015610f9a578082015181840152602081019050610f7f565b83811115610fa9576000848401525b50505050565b610fb88261111a565b810181811067ffffffffffffffff82111715610fd757610fd66110cd565b5b80604052505050565b6000610feb82610f09565b9150610ff683610f09565b92508261100657611005611040565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b61113781610f09565b811461114257600080fd5b5056fea264697066735822122001fdda15e21b2378e177a76c0ddf6384be1fcdcf774b35db5cb1c8bb058bd32c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80631fe543e31461005a57806333592fef146100835780634585e33b1461008d57806353a2c19a146100b65780636e04ff0d146100e1578063e55ae4e81461011f575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610b94565b61015c565b005b61008b61021c565b005b34801561009957600080fd5b506100b460048036038101906100af9190610aa4565b61031e565b005b3480156100c257600080fd5b506100cb61037f565b6040516100d89190610dbb565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610af1565b61038e565b604051610116929190610d38565b60405180910390f35b34801561012b57600080fd5b5061014660048036038101906101419190610b3a565b61043a565b6040516101539190610cd9565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610205929190610d0f565b60405180910390fd5b6102188282610481565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610276576040517f428067d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60006103386040518060200160405280600081525061038e565b50905080610372576040517f5e674dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61037a6104a9565b505050565b6000600363ffffffff16905090565b6000606060008060018111156103a7576103a661106f565b5b600360009054906101000a900460ff1660018111156103c9576103c861106f565b5b1490506000806000805490501190506000804711905060007f0000000000000000000000000000000000000000000000000000000000000000600254426104109190610e7f565b11905083801561041d5750825b80156104265750815b801561042f5750805b955050505050915091565b600080828154811061044f5761044e61109e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6104a5816000815181106104985761049761109e565b5b60200260200101516105f2565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060036040518663ffffffff1660e01b815260040161056e959493929190610d68565b602060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610b67565b9050807f5d09b6924be1682a9a4c201bc3dfb755cd08ec2ec368a81877382246f4a1eb9160405160405180910390a250565b6001600360006101000a81548160ff021916908360018111156106185761061761106f565b5b0217905550600080805490508261062f9190610fe0565b9050600081815481106106455761064461109e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516106f890610cc4565b60006040518083038185875af1925050503d8060008114610735576040519150601f19603f3d011682016040523d82523d6000602084013e61073a565b606091505b505090506107466107db565b8061077d576040517fdb673f4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516107ce9190610cf4565b60405180910390a1505050565b6000600360006101000a81548160ff021916908360018111156108015761080061106f565b5b0217905550600067ffffffffffffffff811115610821576108206110cd565b5b60405190808252806020026020018201604052801561084f5781602001602082028036833780820191505090505b506000908051906020019061086592919061086f565b5042600281905550565b8280548282559060005260206000209081019282156108e8579160200282015b828111156108e75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088f565b5b5090506108f591906108f9565b5090565b5b808211156109125760008160009055506001016108fa565b5090565b600061092961092484610dfb565b610dd6565b9050808382526020820190508285602086028201111561094c5761094b611106565b5b60005b8581101561097c57816109628882610a7a565b84526020840193506020830192505060018101905061094f565b5050509392505050565b600061099961099484610e27565b610dd6565b9050828152602081018484840111156109b5576109b461110b565b5b6109c0848285610f6d565b509392505050565b600082601f8301126109dd576109dc611101565b5b81356109ed848260208601610916565b91505092915050565b60008083601f840112610a0c57610a0b611101565b5b8235905067ffffffffffffffff811115610a2957610a286110fc565b5b602083019150836001820283011115610a4557610a44611106565b5b9250929050565b600082601f830112610a6157610a60611101565b5b8135610a71848260208601610986565b91505092915050565b600081359050610a898161112e565b92915050565b600081519050610a9e8161112e565b92915050565b60008060208385031215610abb57610aba611115565b5b600083013567ffffffffffffffff811115610ad957610ad8611110565b5b610ae5858286016109f6565b92509250509250929050565b600060208284031215610b0757610b06611115565b5b600082013567ffffffffffffffff811115610b2557610b24611110565b5b610b3184828501610a4c565b91505092915050565b600060208284031215610b5057610b4f611115565b5b6000610b5e84828501610a7a565b91505092915050565b600060208284031215610b7d57610b7c611115565b5b6000610b8b84828501610a8f565b91505092915050565b60008060408385031215610bab57610baa611115565b5b6000610bb985828601610a7a565b925050602083013567ffffffffffffffff811115610bda57610bd9611110565b5b610be6858286016109c8565b9150509250929050565b610bf981610f37565b82525050565b610c0881610eb3565b82525050565b610c1781610ec5565b82525050565b610c2681610ed1565b82525050565b6000610c3782610e58565b610c418185610e63565b9350610c51818560208601610f7c565b610c5a8161111a565b840191505092915050565b6000610c72600083610e74565b9150610c7d8261112b565b600082019050919050565b610c9181610edb565b82525050565b610ca081610f09565b82525050565b610caf81610f13565b82525050565b610cbe81610f23565b82525050565b6000610ccf82610c65565b9150819050919050565b6000602082019050610cee6000830184610bff565b92915050565b6000602082019050610d096000830184610bf0565b92915050565b6000604082019050610d246000830185610bff565b610d316020830184610bff565b9392505050565b6000604082019050610d4d6000830185610c0e565b8181036020830152610d5f8184610c2c565b90509392505050565b600060a082019050610d7d6000830188610c1d565b610d8a6020830187610cb5565b610d976040830186610c88565b610da46060830185610ca6565b610db16080830184610ca6565b9695505050505050565b6000602082019050610dd06000830184610c97565b92915050565b6000610de0610df1565b9050610dec8282610faf565b919050565b6000604051905090565b600067ffffffffffffffff821115610e1657610e156110cd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610e4257610e416110cd565b5b610e4b8261111a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e8a82610f09565b9150610e9583610f09565b925082821015610ea857610ea7611011565b5b828203905092915050565b6000610ebe82610ee9565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610f4282610f49565b9050919050565b6000610f5482610f5b565b9050919050565b6000610f6682610ee9565b9050919050565b82818337600083830152505050565b60005b83811015610f9a578082015181840152602081019050610f7f565b83811115610fa9576000848401525b50505050565b610fb88261111a565b810181811067ffffffffffffffff82111715610fd757610fd66110cd565b5b80604052505050565b6000610feb82610f09565b9150610ff683610f09565b92508261100657611005611040565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b61113781610f09565b811461114257600080fd5b5056fea264697066735822122001fdda15e21b2378e177a76c0ddf6384be1fcdcf774b35db5cb1c8bb058bd32c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 904,
        "contract": "contracts/dLottery.sol:DLottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 921,
        "contract": "contracts/dLottery.sol:DLottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 923,
        "contract": "contracts/dLottery.sol:DLottery",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 930,
        "contract": "contracts/dLottery.sol:DLottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LotteryState)899"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)899": {
        "encoding": "inplace",
        "label": "enum DLottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}